head(obs)
obs[1,1]
obs[1,]
obs[,1]
obs$gender
obs[gender]
count(obs)
#ID|PRODUCT|SIZE|PAYER|AGE|GENDER|CATEGORY|CODE|CODE_DESCR|TOTAL_PATIENTS|IPS_PATIENTS|OPS_PATIENTS|OBS_PATIENTS|TOTAL_VISITS|IPS_VISITS|OPS_VISITS|OBS_VISITS
help()
obs <- read.table("c:\\workspace\\data\\obs.txt",sep="|", col.names=c("PRODUCT","SIZE","PAYER","AGE","GENDER","CATEGORY","CODE","CODE_DESCR","TOTAL_PATIENTS","IPS_PATIENTS","OPS_PATIENTS","OBS_PATIENTS","TOTAL_VISITS","IPS_VISITS","OPS_VISITS","OBS_VISITS"))
obs <- read.table("c:\\workspace\\data\\obs.txt", sep="|", col.names=c("ID","PRODUCT","SIZE","PAYER","AGE","GENDER","CATEGORY","CODE","CODE_DESCR","TOTAL_PATIENTS","IPS_PATIENTS","OPS_PATIENTS","OBS_PATIENTS","TOTAL_VISITS","IPS_VISITS","OPS_VISITS","OBS_VISITS"))
nrow(obs)
str(obs)
summary(obs)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
content(obs)
contents(obs)
describe(obs)
head(obs$gender)
head(obs$ID)
head(obs$GENDER)
nrow(obs)
nrow(obs$gender)
nrow(obs$GENDER)
sum(obs$TOTAL_PATIENTS)
dat <- c(obs$GENDER,sum(obs$TOTAL_PATIENTS))
dat
dat <- c(obs$CATEGORY,sum(obs$TOTAL_PATIENTS))
dat
library(datasets)
hist(airquality$Ozone)
summary(airquality)
with(airquality, plot(Wind,Ozone))
air <- transform(airquality, Month=factor(Month))
airquality
airquality==5
with(airquality, plot(Wind,Ozone,main="This is a title",type="n"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month !=5),points(Wind,Ozone, col='red'))
legend("topright",pch=1,col=c("blue","red"),legend =c("May",'Other Months'))
help plot
help(plot)
?par
a <- available.packages()
head(rownames(a),3)
install.packages("knitr")
library(knitr)
search()
install.packages("KernSmooth")
library(KernSmooth)
clear
id <- "Hi.  My name is Dennis Barger"
id
version()
Version()
R.Version()
ver <- "Software installed by Dennis Barger"
id <- "software installed by Dennis Barger"
ver <- id && R.Version()
ver <- id || R.Version()
id
id <- R.Version()
id
ver
id
id
id <- "Software installed by Dennis Barger"
ver <- R.Version()
msg <- c(id, ver)
msg
help read.table
help rad.table()
file <- "c:\\workspace\\data\\mhs\\mhs_visits.csv"
file
data <- read.csv(file,header=TRUE,sep=",")
data
clear
head data
head(data)
summary(data)
head(data,1)
data[1,1]
data[1,]
data[,1]
data[0,0]
data[1,1]
head(data)
datap0,1
data[0,1]
head(data)
data(data,1)
head(data,1)
data
var <- data.frame(index=c(1,2,3,4,5), vol=c(10,30,40,50,20))
var
var[1,1]
var[1,2]
var[index]
var
var.index
var.index[1]
summary(var)
rowsum(var[,1])
var$index
rowsum(var$vol)
describe(var)
rowsum(var)
var2=c(1,2,3,4,5)
var
var2
rowsum(var2)
rowsum(var2,group(var2[1]))
var
sum(var$vol)
colsum(vol)
colSums(var$vol)
colSums(var)
head(data,1)
sum(data$obs.visits)
sum(data@OBS.vists)
sum(data[,3])
data$Bed.Size
heading(data,1)
head(data,1)
rowsum(data,group=data$Total.Visits)
sum(data$Total.Visits)
var2
var
range(var)
range(var$vol)
iqr(var$vol)
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
ls()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,55,z)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
z*2+1000
my_div
bye()
exit
exit()
quit()
for(i in 1:10) {print(i)}
x<- c(1,2,3,4,5)
x
lengty(x)
x <- matrix(1:6, 2,3)
x
seq_len(x)
seq_len(nrow(x))
nrow(x)
ncol(x)
for(1 in seq_len(nrow(x))) {for(j in seq_len(ncol(x))) {print(x[1,j])}}
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x))) {print(x[1,j])}}
add2 <- function(x,y) {
x + y
}
add2(3,5)
rm all
rm
?rm
ls()
rm(list = ls())
above <- function(x, n) {
use < x > n
x[use]
}
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
head(airquality)
columnmeans(airquality)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], removeNA)
}
means
}
columnmena(airquality)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
library(swirl)
swirl()
list.files("c:\\workspace\\data\\specdata")
list.files("c:\\workspace\\data\\specdata",*)
list.files("c:\\workspace\\data\\specdata","*.csv")
list.files("c:\\workspace\\data\\specdata","*.csv", full.names=TRUE)
list.files("c:\\workspace\\data\\specdata","*.csv", full.names=TRUE)
list.files("c:\\workspace\\data\\specdata","*.csv")
q
q
q()
library(recommenderlab)
install.packages("recommenderlab")
library(recommenderlab)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(MovieLense)
summary(MovieLense)
x <- MovieLense
class(x)
head(x)
MovieLense
image(MovieLense, main="Raw ratings")
?data()
data(list)
x <- data()
head(x)
dat <- data(women)
attributes(dat)
head(dat)
dat
q()
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
lapply(x, length)
x
lappy(x, mean)
lapply(x, mean)
sapply(x, mean)
names(x) <- c("ColA", "ColB")
x
sapply(x, mean)
printmsg <- function(x) {
if(x >0)
print("x > zero")
else
print("x <= zero")
invisible(x)
}
printmsg(3)
printmsg(10)
printmsg(1)
printmsg(-1)
?invisible
rm(x)
mean(x)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
off
q()
stop
lm()
x
q()
install.packages("shiny")
library(shiny)
runExample("01_hello")
getwd()
setwd("c:\\users\tyx8mvb\Documents\RH_Workspace\R")
setwd("c:\\users\\tyx8mvb\\Documents\\RH_Workspace\\R")
f <- "./data/LifePoint_ROI2014.csv"
dat <- read.csv(f)
str(f)
rm(list=ls())
f <- "./data/LifePoint_ROI2014.csv"
dat <- read.csv(f)
str(dat)
names(dat) <- c("unit_num","pat_num","disch_date","collections","adjustments","collect_date","adjust_date")
str(dat)
data <- aggregate(cbind(collections,adjustments) ~ collect_date, data=dat,sum)
head(data)
data <- aggregate(cbind(collections,adjustments) ~ unit_num, data=dat,sum)
head(data)
hist(collections)
hist(data$collections)
hist(data$collections, breaks=10)
hist(data$collections, breaks=20)
summary(data$collections)
data$collectink <- data$collections/1000
str(data)
summary(collectink)
summary(data$collectink)
hist(data$collectink, breaks=20)
hist(data$collections, breaks=30)
density(data$collections)
d <- density(data$collections)
plot(d)
plot(data$collections)
head(data)
head(d)
round(d)
str(d)
plot(d)
require(RODBC)|| install.packages('RODBC',dependencies=T)
vSQL <- "SELECT * FROM ODS_RECON..DB_CUSTRPT_CPID_EDITS"
vDataSrc <- "NZ-PROD-12"
con <- odbcConnect(vDataSrc)
df <- sqlQuery(con, vSQL, believeNRows=FALSE, as.is=TRUE)
odbcClose(con)
str(df)
sav <- df
df$EDIT_CNT <- as.numeric(df$EDIT_CNT)
str(df)
hist(df$EDIT_CNT)
hist(df$EDIT_CNT, breaks=20)
hist(df$EDIT_CNT, breaks=100)
hist(df$EDIT_CNT, breaks=50)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
str(folds)
folds[[1]][1:10]
folds[[2]][1:10]
folds[[10]][1:10]
folds[[11]][1:10]
libray(ISLR)
library(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
library(ggplot2)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- WAge[inTrain,]
training <- Wage[inTrain,]
testing <- Wage[inTrain,]
dim(training)
dim(testing)
testing <- Wage[-inTrain,]
dim(testing)
dim(training)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
rep(NA,length(5))
rep(NA,length(15))
install.packages("Rcpp")
library(caret)
data("iris")
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFil <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
print(modFil$finalModel)
plot(modFil$finalModel,uniform=TRUE,main="Classification Tree")
text(modFil$finalModel,use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install.packages(rattle)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
names(segmentationOriginal)
library(rpart)
library(ggplot2)
library(rattle)
install.packages("rattle")
x <- segmentationOriginal
names(x)
unique(x$Case)
training <- x[x$Case=="Train"]
training <- x[x$Case=="Train",]
testing <- x[x$Case=="Test",]
set.seed(125)
model <- train(Class ~., data=training,method="rpart")
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model$finalModel)
plot(model$finalModel,uniform=TRUE)
text(model$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
install.packages(rattle)
set.seed(125)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
# 2. Set the seed to 125 and fit a CART model with the rpart method using all
# predictor variables and default caret settings.
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
# 3. In the final model what would be the final model prediction for cases with the following variable values:
# Look at the output
# a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2       PS
# b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100       WS
# c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100        PS
# d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2              Not possible to predict
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
predict(modFit, newdata = train)
install.packages("ElemStatLearn")
require(RODBC)|| install.packages('RODBC',dependencies=T)
vDataSrc <- "NZ-PROD-12"
vSQL <- "SELECT * FROM ODS_RECON..TMP_MFG_MASTER LIMIT 10000"
con <- odbcConnect(vDataSrc,uid="tyx8mvb",pwd="Inghalf9")
df <- sqlQuery(con, vSQL, believeNRows=FALSE, nullstring="0",stringsAsFactors=FALSE)
odbcClose(con)
str(df)
head(df)
names(df)
summary(df)
setwd("c:\\get-repos\\datasciencecoursera\\repdata015\\RepData_PeerAssessment1")
df <- read.csv("activity.csv",sep=",")
df$date <- as.Date(df$date)
dat <- df[!is.na(df$steps),]
na_count <- sum(is.na((df$steps)))
na_count
na_pos <- which(is.na((df$steps)))
head(na_pos)
mean_vec <- rep(mean(df$steps,na.rm = TRUE,times=length(na_pos))
mean_vec <- rep(mean(df$steps, na.rm = TRUE), times = length(na_pos))
class(mean_vec)
length(mean_vec)
head(mean_vec)
cnt <- sum(is.na(df$steps))
missing <- which(is.na(df$steps))
impute_val <- rep(mean(df$steps, na.rm = TRUE, times=length(missing)))
activity <- df
activity[missing, "steps"] <- impute_val
cnt <- sum(is.na(activity$steps))
length(cnt)
cnt
cnt <- sum(is.na(df$steps))
paste("Total count of missing steps values:  ", cnt, sep="")
missing <- which(is.na(df$steps))
impute_val <- rep(mean(df$steps, na.rm = TRUE, times=length(missing)))
dat_rev <- df
dat_rev[missing, "steps"] <- impute_val
tbl <- aggregate(steps ~ date, data=dat_rev, sum)
qplot(tbl$steps,
geom="histogram",
binwidth=1000,
main="Frequency of Total Steps Per Day",
xlab="Total Steps Per DaY",
ylab="Count of Days",
fill=I("blue"),
col=I("white"))
require(ggplot2)
library(ggplot2)
qplot(tbl$steps,
geom="histogram",
binwidth=1000,
main="Frequency of Total Steps Per Day",
xlab="Total Steps Per DaY",
ylab="Count of Days",
fill=I("blue"),
col=I("white"))
mean.steps <- round(mean(tbl$steps),0)
median.steps <- median(tbl$steps)
paste("Average (mean) steps taken per day:  ",mean.steps,sep = "")
paste("Median steps taken per day:  ",median.steps,sep = "")
